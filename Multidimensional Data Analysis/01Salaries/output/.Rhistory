ggvis(~temperature, ~pressure) %>%
layer_lines(stroke := "darkred", strokeDash := 5, strokeWidth := 5) %>%
layer_points(size := 100, fill := "lightgreen") %>%
layer_smooths(stroke := "darkred")
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_lines(stroke := "orange", strokeDash := 5, strokeWidth := 5) %>%
layer_points(size := 100, fill := "darkred") %>%
layer_smooths(stroke := "darkred")
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_lines(stroke := "orange", strokeDash := 5, strokeWidth := 5) %>%
layer_points(size := 100, fill := "darkred", shape:="circle") %>%
layer_smooths(stroke := "darkred")
layer_lines(stroke := "orange")
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl)) %>%
layer_points() %>%
add_legend("fill", title = "Cylinders",
properties = legend_props(
title = list(fontSize = 16),
labels = list(fontSize = 14, dx = 5),
symbol = list(stroke = "black", strokeWidth = 2,
shape = "square", size = 200),
legend = list(
x = scaled_value("x", 4.5),
y = scaled_value("y", 30)
)
)
)
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl)) %>%
layer_points() %>%
add_legend("fill", title = "Cylinders",
properties = legend_props(
title = list(fontSize = 16),
labels = list(fontSize = 14, dx = 5),
symbol = list(stroke = "black", strokeWidth = 2,
shape = "square", size = 200),
legend = list(
y = scaled_value("y", 30)
)
)
)
mtcars %>%
ggvis(~wt, ~mpg, fill = ~disp, stroke = ~disp, strokeWidth := 2) %>%
layer_points() %>%
scale_numeric("fill", range = c("red", "yellow"))
mtcars %>%
ggvis(~wt, ~mpg, fill = ~disp, stroke = ~disp, strokeWidth := 2) %>%
layer_points() %>%
scale_numeric("fill", range = c("red", "yellow")) %>%
scale_numeric("stroke", range=c("darkred","orange"))
mtcars %>%
ggvis(~wt, ~mpg, fill = ~disp, stroke = ~disp, strokeWidth := 2) %>%
layer_points()
mtcars %>% ggvis(~wt, ~mpg, fill = ~hp) %>%
layer_points() %>%
scale_numeric("fill", range = c("green","beige"))
mtcars %>% ggvis(~wt, ~mpg, fill = ~factor(cyl)) %>%
layer_points() %>%
scale_nominal("fill", range= c("purple", "blue", "green"))
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%
layer_points() %>%
scale_numeric("opacity", range=c(0.2,1))
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%
layer_points()
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%
layer_points() %>%
scale_numeric("opacity", range=c(0.2,1))
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%
layer_points()
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%
layer_points() %>%
scale_numeric("opacity", range=c(0.2,1))
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%
layer_points()
mtcars %>% ggvis(~wt, ~mpg, fill = ~disp) %>%
layer_points() %>%
scale_numeric("y", domain = c(0, NA))
mtcars %>% ggvis(x = ~wt, y = ~mpg, fill = ~factor(cyl), opacity = ~hp) %>%
layer_points() %>%
scale_numeric("opacity", range=c(0.2,1))
mtcars %>% ggvis(~wt, ~mpg, fill = ~disp) %>%
layer_points() %>%
scale_numeric("y", domain = c(0, NA)) %>%
scale_numeric("x", domain = c(0,6)
.
mtcars %>% ggvis(~wt, ~mpg, fill = ~disp) %>%
layer_points() %>%
scale_numeric("y", domain = c(0, NA)) %>%
scale_numeric("x", domain = c(0,6))
source('~/.active-rstudio-document', echo=TRUE)
devtools::install_github('rstudio/rmarkdown')
devtools::install_github('rstudio/rmarkdown')
head(pressure)
head(mtcars)
library(ggvis)
mtcars %>% ggvis(~wt, ~mpg, fill := "red") %>% layer_points(
)
library(dplyr)
mtcars %>% ggvis(~wt, ~mpg, fill := "red") %>% layer_points()
par
par()
par()$mfrow
library("maps")
install.packages("maps")
library("maps")
head(faithful)
head(pressure)
pressure %>%
ggvis(~temperature, ~pressure, fill := ~black) %>%
layer_points()
# Plot the faithful data as described in the second instruction
faithful %>%
ggvis(~waiting, ~eruptions, size= ~eruptions, opacity:=0.5, fill:= "blue", stroke:="black") %>%
layer_points()
# Plot the faithful data as described in the third instruction
faithful %>% ggvis(~waiting, ~eruptions, fillOpacity =~eruptions , size:=100, stroke:= "red", shape:="cross", fill:= "red") %>% layer_points()
pressure %>%
ggvis(~temperature, ~pressure, fill := ~black) %>%
layer_points()
pressure %>%
ggvis(~temperature, ~pressure, fill := ~orange) %>%
layer_points()
pressure %>%
ggvis(~temperature, ~pressure, fill := ~green) %>%
layer_points()
pressure %>%
ggvis(~temperature, ~pressure, fill := ~red) %>%
layer_points()
# Run this code and inspect the output. Follow the link in the instructions for the interactive version
faithful %>%
ggvis(~waiting, ~eruptions, fillOpacity := 0.5,
shape := input_select(label = "Choose shape:",
choices = c("circle", "square", "cross", "diamond", "triangle-up", "triangle-down"))) %>%
layer_points()
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_lines(stroke:="black", opacity := 0.5) %>%
layer_points() %>%
layer_model_predictions(model = "lm" ,stroke := "navy")  %>%
layer_smooths(stroke:= "skyblue")
pressure %>%
ggvis(~temperature, ~pressure, stroke := "skyblue") %>%
layer_lines() %>% layer_points()
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_lines(stroke := "skyblue") %>% layer_points()
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_lines(stroke := "skyblue") %>%
layer_points(shape := "triangle-up")
pressure %>%
ggvis(~temperature, ~pressure,stroke := "skyblue",
strokeOpacity := 0.5, strokeWidth := 5) %>%
layer_lines() %>%
layer_points( fill = ~temperature ,shape := "triangle-up",
size := 300)
theme: united
compute_smooth(mpg~wt)
mtcars %>% compute_smooth(mpg~wt)
pressure
head(mtcars)
head(faithfulls)
head(faithful)
mtcars %>%
ggvis(~wt, ~mpg, fill = ~disp, stroke = ~disp, strokeWidth := 2) %>%
layer_points() %>%
scale_numeric("fill", range = c("red", "yellow")) %>%
scale_numeric("stroke", range=c("darkred","orange"))
rstudio
seeds
source('~/.active-rstudio-document', echo=TRUE)
dbinom(10,size=10,prob=.5)
dbinom(1,size=10,prob=.5)
dbinom(1,size=10,prob=.5)
dbinom(2,size=10,prob=.5)
dbinom(9,size=10,prob=.5)
dbinom(5,size=10,prob=.5)
dbinom(25,size=50,prob=.5)
dbinom(100,size=50,prob=.5)
dbinom(9,size=10,prob=.5)
dbinom(10,size=10,prob=.5) +dbinom(9,size=10,prob=.5)
dbinom(10,size=10,prob=.5) + dbinom(9,size=10,prob=.5) + dbinom(8,size=10,prob=.5)
dbinom(10,size=10,prob=.75) + dbinom(9,size=10,prob=.75)
dbinom(1,size=8,prob=1/6)
5/6
(5/6)^17
(5/6)^16
(5/6)^15
qchisq(.96, df=6)
qchisq(.965, df=6)
qchisq(.955, df=6)
qchisq(.95, df=6)
qchisq(.951, df=6)
qchisq(.9501, df=6)
qchisq(.9502, df=6)
qchisq(.9502, df=5)
qchisq(.96, df=5)
qchisq(.97, df=5)
qchisq(.985, df=5)
qchisq(.98, df=5)
qchisq(.975, df=5)
qchisq(.971, df=5)
qchisq(.97, df=5)
qchisq(.972, df=5)
qchisq(.973, df=5)
title: "Untitled"
The purpose of this project is to implement and solve a `Support Vector Machine` (svm), with a dataset provided in order to correctly classify our dataset into two different classes. In order to accomplish this, we will consider $m$ points of the following function $\mathbb{R}$
$$\underset{(w,\gamma,y)\in\mathbb{R}^n+1+m min\ \  \nu e^Ty\ +\ \frac{1}{2}\ ||w||_2^2$$
y≥0
+ Item 2b
install.packages("XLconnect")
yes
install.packages("XLConnect")
a=20
b=30
rm(list=ls()=
rm(list=ls())
*()
a=2
is(a)
x<-c(2,3,4,5,6,7,8,9)
x[2,4,6]
x[[2]]
x[[2],[3]]
x[[2,5]]
x[TRUE]
x[TRUE,FALSE]
x[c(2,5,6)]
x[c(2,6,5)]
x[c(TRUE,FALSE,TRUE)]
x[c(TRUE,FALSE)]
mat<-matrix[1:9,byRow=TRUE]
mat<-matrix(1:9,byRow=TRUE)
mat<-matrix(1:9)
mat
mat<-matrix(1:9, col 3)
mat<-matrix(1:9, col =3)
mat<-matrix(1:9, col=3)
?matrix
mat<-matrix(1:9, ncol=3)
mat
mat*5
rowSums(mat)
factor?
.
as.factor?
¿
?asfactor
vector<-c("a","b","c","d")
factor(vector)
factor?
.
factor()?
s
?factor
?Bi
?binomial
dbinom(1,20,.5)
dbinom(2,20,.5)
dbinom(3,20,.5)
dbinom(4,20,.5)
dbinom(9,20,.5)
dbinom(10,20,.5)
dbinom(20,20,.5)
dbinom(18,20,.5)
dbinom(10,20,.5)
dbinom(5,10,.5)
dbinom(25,50,.5)
dbinom(50,100,.5)
dbinom(50,100,.5)
?dbinom
rbinom(50,100,.5)
qbinom(50,100,.5)
qbinom(50,100,.5)
dbinom(8,size=10,prob=.5)+dbinom(9,size=10,prob=.5)+dbinom(10,size=10,prob=.5)
dbinom(9,size=10,prob=.5)+dbinom(10,size=10,prob=.5)
c(1:20)
(5/6)^c(1:20)
(5/6)^10
pnorm(.7, mean=0, sd=1.2, lower.tail=FALSE)
pnorm(.7, mean=0, sd=sqrt(3), lower.tail=FALSE)
pnorm(.7, mean=0, sd=sqrt(3), lower.tail=TRUE)
pnorm(.7, mean=0, sd=sqrt(3/10), lower.tail=TRUE)
pnorm(.7, mean=0, sd=sqrt(3/10), lower.tail=False)
pnorm(.7, mean=0, sd=sqrt(3/10), lower.tail=FALSE)
pnorm(1.96)
pnorm(1.96, lower.tail = FALSE)
pnorm(1.96, lower.tail = FALSE)
pnorm(1.27, lower.tail = FALSE)
pnorm(.7, mean=0, sd=sqrt(3/24), lower.tail=FALSE)
pnorm(.7, mean=0, sd=sqrt(3/24), lower.tail=FALSE)*2
dbinom(8,size=10,prob=.5)+dbinom(9,size=10,prob=.5)+dbinom(10,size=10,prob=.5)
qchisq(.95, df=7)
qchisq(12.6, df=5)
qchisq(12.6, df=5)
.95
qchisq(.95, df=5)
dbinom(8,size=10,prob=.5)+dbinom(9,size=10,prob=.5)+dbinom(10,size=10,prob=.5)
x<-c(14,17,20,5,19)
y<-c(18,13,22,2,16,29)
x<-c(14,17,20,5,25,19)
1 - pchisq(12.6, 5)
pchisq(12.6, 5)
?pt
qt(c(.025, .975), df=5)
pt(.99,5)
pt(.01,5)
pt(.01,5)/2
pnorm(2.575,lower.tail=FALSE)
pnorm(2.575,lower.tail=TRUE)
?pnorm
qnorm(.99,lower.tail=FALSE)
qnorm(.99,lower.tail=TRUE)
qnorm(.05,lower.tail=TRUE)
qnorm(.05,lower.tail=FALSE)
qnorm(.999,lower.tail=FALSE)
qnorm(.99,lower.tail=TRUE)
qnorm(.99,lower.tail=TRUE)
15.4+2.365*.5
15.4-2.365*.5
1.645*.5/.05
16.45^2
1 - pchisq(12.6, 5)
qchisq(.95, df=5)
choose(40,3)
1-choose(40,3)/choose(52,3)
qnorm(.9,lower.tail=TRUE)
qnorm(.95,lower.tail=TRUE)
qnorm(.9,lower.tail=FALSE)
qnorm(.95,lower.tail=FALSE)
qnorm(.95,lower.tail=TRUE)
qnorm(.9,lower.tail=TRUE)
qnorm(.9,lower.tail=TRUE)
qnorm(.95,lower.tail=TRUE)
dbinom(c(9:17),size=17,prob=.552)
sum(dbinom(c(9:17),size=17,prob=.552))
qnorm(.975,lower.tail=TRUE)
z_normal <- function(x){
y = 1 - pnorm(x)
return(y)
}
z_normal(1.96)
z_normal(.05)
z_normal(.95)
z_normal(.975)
z_normal(.05)
z_normal(.5)
z_normal(5)
z_normal(.63)
z_normal(.353)
z_normal(2.08)
pt(.95,8)
?pt
homes1<-c(340,344,362,375)
homes2<-c(356,386,354,364)
homes3<-c(332,402,340,355)
homes4<-c(318,360,338,370)
homes<-rbind(homes1,homes2,homes3,homes4)
homes
homes5<-c(318,360,338,370)
homes4<-c(362,322,372,324)
homes<-rbind(homes1,homes2,homes3,homes4,homes5)
homes
mean(homes)
?var
var(homes)
sd(homes)
?apply
(homes-350)^2
sum((homes-350)^2)
sum((homes-350)^2)/8
sqrt(sum((homes-350)^2)/8)
sqrt(sum((homes-350)^2)/9)
sqrt(sum((homes-350)^2)/8)
z_normal(.333)
sd(homes)
Z= (mean(homes)-350)/(sd(homes)/sqrt(9))
Z
mean(homes)
sd(homes)/3
3.8/sd(homes/3)
z_normal(.5217917)
library(dplyr)
salaries  %>% select(JobTitle)   #distinct(JobTitle)
salaries<-read.csv("Salaries.csv")
getwd()
setwd("/Users/saulgarcia/Desktop/DATA/01Salaries/output")
salaries<-read.csv("Salaries.csv")
?dim
dim(salaries)[1]
This dataset contains `dim(salaries)[1]`
This dataset contains `dim(salaries)[2]`
dim(salaries)[2]
sum(salaries$OvertimePay)
salaries<-read.csv("Salaries.csv", stringsAsFactors = FALSE)
str(salaries)
names(salaries)
class(names(salaries))
class(Salaries$names(salaries))
class(salaries$names(salaries))
class(salaries$as.character(names(salaries)))
?str
str(salaries)[1]
str(salaries)[2]
summary(salaries)[1]
summary(salaries)[,1]
names(salaries)[1]
class(salaries)
class(salaries$Id)
class(salaries$salaries)
class(salaries[1])
library(dplyr)
data<-read.csv("Salaries.csv")
head(salaries$Status,6)
salaries %>% distinct(Status)
salaries2<-read.csv("salariesclean.txt", header=TRUE)
head(salaries2)
salaries2<-read.table("salariesclean.txt", header=TRUE)
t
salaries2<-read.table("salariesclean.txt")
getwd()
setwd("/Users/saulgarcia/Desktop/Github/DMKM/Multidimensional Data Analysis/01Salaries/output")
lswd()
ls()
wd()
dir()
data123<-read.csv("salariesclean.csv")
data123<-read.csv("salariesclean.txt")
head(data123)
data123<-read.table("salariesclean.txt")
data123<-read.table("salariesclean.txt",h=TRUE)
data123<-read.csv("salariesclean.txt",sep ="\t")
data123
data123 %>% group_by(JobTitle) %>% summarise(n=n())
data123 %>% group_by(JobTitle) %>% desc(summarise(n=n()))
data123 %>% group_by(JobTitle) %>% summarise(n=n())
data1234<-data123 %>% group_by(JobTitle) %>% summarise(n=n())
data1234[,n]
data1234[order(-n)]
data1234[order(-data123$n)]
data1234[order(-data1234$n)]
data1234
data1234[order(-data1234$n),]
data12345<-data1234[order(-data1234$n),]
data12345[20]
data12345[20,]
data12345
data12345[48,]
data12345[45,]
data12345[38,]
data12345 %>% mutate (cumsum =cumsum(n))
data123456<-data12345 %>% mutate (cumsum =cumsum(n))
sum(data123456$n)
Cat<-as.vector(data123456[1:10,1])
Cat
data123
data123 %>% filter(JobTitle == Cat)
Cat
Cat<-as.vector(data123456[1:10,1])
Cat
unlist(Cat)
as.vector(unlist(Cat))
Cat<-as.vector(data123456[1:10,1])
Cat
Cat<-as.vector(unlist(data123456[1:10,1]))
Cat
data123 %>% filter(JobTitle == Cat)
data111<-data123 %>% filter(JobTitle == Cat)
dim(data111)
data123456
dim(data111)
dim(data123)
data123456
Cat<-as.vector(unlist(data123456[1:10,1]))
Cat
data111<-data123 %>% filter(JobTitle == Cat)
dim(data111)
data111<-data123 %>% filter(JobTitle == "Transit Operator")
dim(data111)
nums<-c("BasePay","OvertimePay","OtherPay","Benefits")
nums
class(nums)
class(Cat)
data111<-data123 %>% filter(JobTitle == Cat)
data111 %>% mutate(n=n())
data111<-data123 %>% group_by(JobTitle) %>% filter(JobTitle == Cat)
dim(data111)
data111 %>% group_by(JobTitle) %>% mutate(JobTitle == Cat)
Cat
data123456
sum(data123456$n)
data111<-data123 %>% filter(JobTitle == "Transit Operator")
dim(data111)
Cat2<-c("Transit Operator", "Special Nurse")
data111<-data123 %>% filter(JobTitle == Cat2)
dim(data111)
data111[,data111$JobTitle==Cat2]
data111[,data111$JobTitle=="TransitOperator"]
data111[data111$JobTitle=="TransitOperator",]
data111[data111$JobTitle=="Transit Operator",]
data111[data111$JobTitle==Cat2,]
dim(111)
dim(data111)
data1<-data123 %>% filter(JobTitle == "Transit Operator")
dim(data1)
data2<-data123 %>% filter(JobTitle == "Special Nurse")
dim(data2)
data123456
Cat
Cat[1]
Cat[2]
