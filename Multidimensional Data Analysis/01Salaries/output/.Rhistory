ggvis(~temperature, ~pressure, fill := ~red) %>%
layer_points()
# Run this code and inspect the output. Follow the link in the instructions for the interactive version
faithful %>%
ggvis(~waiting, ~eruptions, fillOpacity := 0.5,
shape := input_select(label = "Choose shape:",
choices = c("circle", "square", "cross", "diamond", "triangle-up", "triangle-down"))) %>%
layer_points()
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_lines(stroke:="black", opacity := 0.5) %>%
layer_points() %>%
layer_model_predictions(model = "lm" ,stroke := "navy")  %>%
layer_smooths(stroke:= "skyblue")
pressure %>%
ggvis(~temperature, ~pressure, stroke := "skyblue") %>%
layer_lines() %>% layer_points()
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_lines(stroke := "skyblue") %>% layer_points()
pressure %>%
ggvis(~temperature, ~pressure) %>%
layer_lines(stroke := "skyblue") %>%
layer_points(shape := "triangle-up")
pressure %>%
ggvis(~temperature, ~pressure,stroke := "skyblue",
strokeOpacity := 0.5, strokeWidth := 5) %>%
layer_lines() %>%
layer_points( fill = ~temperature ,shape := "triangle-up",
size := 300)
theme: united
compute_smooth(mpg~wt)
mtcars %>% compute_smooth(mpg~wt)
pressure
head(mtcars)
head(faithfulls)
head(faithful)
mtcars %>%
ggvis(~wt, ~mpg, fill = ~disp, stroke = ~disp, strokeWidth := 2) %>%
layer_points() %>%
scale_numeric("fill", range = c("red", "yellow")) %>%
scale_numeric("stroke", range=c("darkred","orange"))
rstudio
seeds
source('~/.active-rstudio-document', echo=TRUE)
dbinom(10,size=10,prob=.5)
dbinom(1,size=10,prob=.5)
dbinom(1,size=10,prob=.5)
dbinom(2,size=10,prob=.5)
dbinom(9,size=10,prob=.5)
dbinom(5,size=10,prob=.5)
dbinom(25,size=50,prob=.5)
dbinom(100,size=50,prob=.5)
dbinom(9,size=10,prob=.5)
dbinom(10,size=10,prob=.5) +dbinom(9,size=10,prob=.5)
dbinom(10,size=10,prob=.5) + dbinom(9,size=10,prob=.5) + dbinom(8,size=10,prob=.5)
dbinom(10,size=10,prob=.75) + dbinom(9,size=10,prob=.75)
dbinom(1,size=8,prob=1/6)
5/6
(5/6)^17
(5/6)^16
(5/6)^15
qchisq(.96, df=6)
qchisq(.965, df=6)
qchisq(.955, df=6)
qchisq(.95, df=6)
qchisq(.951, df=6)
qchisq(.9501, df=6)
qchisq(.9502, df=6)
qchisq(.9502, df=5)
qchisq(.96, df=5)
qchisq(.97, df=5)
qchisq(.985, df=5)
qchisq(.98, df=5)
qchisq(.975, df=5)
qchisq(.971, df=5)
qchisq(.97, df=5)
qchisq(.972, df=5)
qchisq(.973, df=5)
title: "Untitled"
The purpose of this project is to implement and solve a `Support Vector Machine` (svm), with a dataset provided in order to correctly classify our dataset into two different classes. In order to accomplish this, we will consider $m$ points of the following function $\mathbb{R}$
$$\underset{(w,\gamma,y)\in\mathbb{R}^n+1+m min\ \  \nu e^Ty\ +\ \frac{1}{2}\ ||w||_2^2$$
y≥0
+ Item 2b
install.packages("XLconnect")
yes
install.packages("XLConnect")
a=20
b=30
rm(list=ls()=
rm(list=ls())
*()
a=2
is(a)
x<-c(2,3,4,5,6,7,8,9)
x[2,4,6]
x[[2]]
x[[2],[3]]
x[[2,5]]
x[TRUE]
x[TRUE,FALSE]
x[c(2,5,6)]
x[c(2,6,5)]
x[c(TRUE,FALSE,TRUE)]
x[c(TRUE,FALSE)]
mat<-matrix[1:9,byRow=TRUE]
mat<-matrix(1:9,byRow=TRUE)
mat<-matrix(1:9)
mat
mat<-matrix(1:9, col 3)
mat<-matrix(1:9, col =3)
mat<-matrix(1:9, col=3)
?matrix
mat<-matrix(1:9, ncol=3)
mat
mat*5
rowSums(mat)
factor?
.
as.factor?
¿
?asfactor
vector<-c("a","b","c","d")
factor(vector)
factor?
.
factor()?
s
?factor
?Bi
?binomial
dbinom(1,20,.5)
dbinom(2,20,.5)
dbinom(3,20,.5)
dbinom(4,20,.5)
dbinom(9,20,.5)
dbinom(10,20,.5)
dbinom(20,20,.5)
dbinom(18,20,.5)
dbinom(10,20,.5)
dbinom(5,10,.5)
dbinom(25,50,.5)
dbinom(50,100,.5)
dbinom(50,100,.5)
?dbinom
rbinom(50,100,.5)
qbinom(50,100,.5)
qbinom(50,100,.5)
dbinom(8,size=10,prob=.5)+dbinom(9,size=10,prob=.5)+dbinom(10,size=10,prob=.5)
dbinom(9,size=10,prob=.5)+dbinom(10,size=10,prob=.5)
c(1:20)
(5/6)^c(1:20)
(5/6)^10
pnorm(.7, mean=0, sd=1.2, lower.tail=FALSE)
pnorm(.7, mean=0, sd=sqrt(3), lower.tail=FALSE)
pnorm(.7, mean=0, sd=sqrt(3), lower.tail=TRUE)
pnorm(.7, mean=0, sd=sqrt(3/10), lower.tail=TRUE)
pnorm(.7, mean=0, sd=sqrt(3/10), lower.tail=False)
pnorm(.7, mean=0, sd=sqrt(3/10), lower.tail=FALSE)
pnorm(1.96)
pnorm(1.96, lower.tail = FALSE)
pnorm(1.96, lower.tail = FALSE)
pnorm(1.27, lower.tail = FALSE)
pnorm(.7, mean=0, sd=sqrt(3/24), lower.tail=FALSE)
pnorm(.7, mean=0, sd=sqrt(3/24), lower.tail=FALSE)*2
dbinom(8,size=10,prob=.5)+dbinom(9,size=10,prob=.5)+dbinom(10,size=10,prob=.5)
qchisq(.95, df=7)
qchisq(12.6, df=5)
qchisq(12.6, df=5)
.95
qchisq(.95, df=5)
dbinom(8,size=10,prob=.5)+dbinom(9,size=10,prob=.5)+dbinom(10,size=10,prob=.5)
x<-c(14,17,20,5,19)
y<-c(18,13,22,2,16,29)
x<-c(14,17,20,5,25,19)
1 - pchisq(12.6, 5)
pchisq(12.6, 5)
?pt
qt(c(.025, .975), df=5)
pt(.99,5)
pt(.01,5)
pt(.01,5)/2
pnorm(2.575,lower.tail=FALSE)
pnorm(2.575,lower.tail=TRUE)
?pnorm
qnorm(.99,lower.tail=FALSE)
qnorm(.99,lower.tail=TRUE)
qnorm(.05,lower.tail=TRUE)
qnorm(.05,lower.tail=FALSE)
qnorm(.999,lower.tail=FALSE)
qnorm(.99,lower.tail=TRUE)
qnorm(.99,lower.tail=TRUE)
15.4+2.365*.5
15.4-2.365*.5
1.645*.5/.05
16.45^2
1 - pchisq(12.6, 5)
qchisq(.95, df=5)
choose(40,3)
1-choose(40,3)/choose(52,3)
qnorm(.9,lower.tail=TRUE)
qnorm(.95,lower.tail=TRUE)
qnorm(.9,lower.tail=FALSE)
qnorm(.95,lower.tail=FALSE)
qnorm(.95,lower.tail=TRUE)
qnorm(.9,lower.tail=TRUE)
qnorm(.9,lower.tail=TRUE)
qnorm(.95,lower.tail=TRUE)
dbinom(c(9:17),size=17,prob=.552)
sum(dbinom(c(9:17),size=17,prob=.552))
qnorm(.975,lower.tail=TRUE)
z_normal <- function(x){
y = 1 - pnorm(x)
return(y)
}
z_normal(1.96)
z_normal(.05)
z_normal(.95)
z_normal(.975)
z_normal(.05)
z_normal(.5)
z_normal(5)
z_normal(.63)
z_normal(.353)
z_normal(2.08)
pt(.95,8)
?pt
homes1<-c(340,344,362,375)
homes2<-c(356,386,354,364)
homes3<-c(332,402,340,355)
homes4<-c(318,360,338,370)
homes<-rbind(homes1,homes2,homes3,homes4)
homes
homes5<-c(318,360,338,370)
homes4<-c(362,322,372,324)
homes<-rbind(homes1,homes2,homes3,homes4,homes5)
homes
mean(homes)
?var
var(homes)
sd(homes)
?apply
(homes-350)^2
sum((homes-350)^2)
sum((homes-350)^2)/8
sqrt(sum((homes-350)^2)/8)
sqrt(sum((homes-350)^2)/9)
sqrt(sum((homes-350)^2)/8)
z_normal(.333)
sd(homes)
Z= (mean(homes)-350)/(sd(homes)/sqrt(9))
Z
mean(homes)
sd(homes)/3
3.8/sd(homes/3)
z_normal(.5217917)
seq(from=4,length=3,by=3)
x+y
x/y
x^y
x
x<-c(2,7,5)
x
y=seq(from=4,length=3,by=3)
?seq
y
x+y
x/y
x^y
### vectors, data, matrices, subsetting
x<-c(2,7,5)
x
y=seq(from=4,length=3,by=3)
?seq
y
x+y
x/y
x^y
x[2]
x[-2]
x[2:3]
x[-c(1,2)]
matrix(seq(1,12),4,3)
z<-matrix(seq(1,12),4,3)
matrix(seq(1,12),4,3)
matrix(seq(1,12), row=4, byrow=TRUE)
?matrix
matrix(seq(1,12), nrow=4, byrow=TRUE)
matrix(seq(1,12), 4, byrow=TRUE)
z[3:4,2:3]
z[,1]
z[,1,drop=FALSE]
dim(z)
ls()
rm(y)
rm(list=ls())
x<-runif(50)
x
x<-runif(50)    #Random uniforms
y<-rnorm(50)    #Random normal
plot(x,y)
main="PLOT",pch="*",
plot(x,y, xlab="Random Uniform",
ylab= "Random Normal",
main="PLOT",pch="*",
col="blue", fill="red")
col="blue")
plot(x,y, xlab="Random Uniform",
ylab= "Random Normal",
main="PLOT",pch="*",
col="blue")
x<-runif(50)    #Random uniforms
y<-rnorm(50)    #Random normal
plot
plot(x,y, xlab="Random Uniform",
ylab= "Random Normal",
main="PLOT",pch="*",
col="blue")
par(mfrow=c(2,1))   #Panel of plots 2 rows and 1 column
plot(x,y, xlab="Random Uniform",
par(mfrow=c(2,1))   #Panel of plots 2 rows and 1 column
plot(x,y, xlab="Random Uniform",
ylab= "Random Normal",
main="PLOT",pch="*",
col="blue")
par(mfrow=c(2,1))
plot(x,y, xlab="Random Uniform",
ylab= "Random Normal",
main="PLOT",pch="*",
col="blue")
par(mfrow=c(2,1))   #Panel of plots 2 rows and 1 column
plot(x,y)
plot(y)
par(mfrow=c(1,1))
Auto<- read.csv("~/Users/saulgarcia/Dropbox/MOOCS/Statistical Learning/Datasets")
Auto<- read.csv("~/Users/saulgarcia/Dropbox/MOOCS/Statistical Learning/Datasets/Auto.csv")
Auto<- read.csv("~/Users/saulgarcia/Dropbox/MOOCS/Statistical Learning/Datasets/Auto.csv")
Auto<- read.csv("/Users/saulgarcia/Dropbox/MOOCS/Statistical Learning/Datasets/Auto.csv")
Auto<- read.csv("/Users/saulgarcia/Dropbox/MOOCS/Statistical Learning/Datasets/Auto.csv")
setwd(/Users/saulgarcia/Dropbox/MOOCS/Statistical Learning/Datasets)
setwd("/Users/saulgarcia/Dropbox/MOOCS/Statistical Learning/Datasets")
getwd()
Auto<- read.csv("Auto.csv")
rm(list=ls()) #Clean working directory
Auto<- read.csv("Auto.csv")
names(auto)
names(Auto)
dim(Auto)
class(Auto)
summary(Auto)
plot(Auto$cylinders,Auto$mpg)
plot(Auto$cyl,Auto$mpg)
plot(Auto$cyl,Auto$mpg)
attach(Auto)
search()
plot(cylinders,mpg)
library(dplyr)
Auto %<% plot(cylinders,mpg)
Auto %>% plot(cylinders,mpg)
Auto %>% plot(cylinders,mpg)
?"dplyr"
plot(cylinders,mpg)
cylinders-as.factor(cylinders)
plot(cylinders,mpg)
cylinders<-as.factor(cylinders)
plot(cylinders,mpg)
pnorm(2.5, lower.tail = FALSE)
pnorm(2.5, lower.tail = TRUE)
pnorm(2.5, lower.tail = TRUE)
z_normal(.9)
z_normal <- function(x){
y = 1 - pnorm(x)
return(y)
}
z_normal(.9)
z_normal(.95)
qnorm(.9,lower.tail=TRUE)
qnorm(.95,lower.tail=TRUE)
qnorm(.975,lower.tail=TRUE)
library(ISLR)
install.packages("ISLR")
library(MASS)
library(ISLR)
names(Boston)
?Boston
plot(med~)lstat,Boston)
plot(med~lstat,Boston)
plot(medv~lstat,Boston)
fit1-lm(medv~lstat,data = Boston)
fit1<-lm(medv~lstat,data = Boston)
fit1
?Boston
str(Boston)
summary(fit1)
abline(fit1,col="red")
abline(fit1,col="red", ltw=3)
abline(fit1,col="red", ltw=3)
abline(fit1,col="red", lwd=3)
names(fit1)
confint(fit1)
predict(fit1,data.frame(lstat=c(5,10,15)), interval= "confidence")
fit2= lm(medv~lstat+age, data=Boston)   #Now we have more than one variable
summary(fit2)
fit3=lm(medv~.,Boston)
summary(fit3)
mpar(mfrow=c(2,2))
plot(fit3)
par(mfrow=c(2,2))
plot(fit3)
fit4<-update(fit3, ~.-age-indus)
plot(fit4)
plot(fit4)
summary(fit4)
fit5<-lm(medv~lstat*age, Boston)
summary(fit5)
fit6<-lm(medv~lstat + I(lstat^2), Boston); summary(fit6)
attach(Boston)
par(mfrow=c(1,1))
plot(medv~lstat)
points(lstat, fitted(fit6), col="red",pch=20)
fit7<-lm(medv~poly(lstat,4)) #Easier way to fit polynomials
points=(lstat, fitted(fit7), col="blue", pch=20)
points<-(lstat, fitted(fit7), col="blue", pch=20)
fit7<-lm(medv~poly(lstat,4)) #Easier way to fit polynomials
points<-(lstat, fitted(fit7), col="blue", pch=20)
points(lstat, fitted(fit7), col="blue", pch=20)
summary(fit7)
plot(1:20,1:20,pch=1:20,cex=2)
fix(carseats)
fix(Carseats)
names(Carseats)
install.packages("x11")
install.packages("XQuartz")
fix(Carseats)
fix(Carseats)
summary(Carseats)
fit1<-lm(Sales~.+Income:Advertising+Age:Price,Carseats)
summary(fit1)
contrasts(Carseats(ShelveLoc))
contrasts(Carseats$ShelveLoc)
regplot=function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attatch(Carseats)
regplot(Price,Sales)
names(Carseats)
regplot=function(x,y){
fit=lm(y~x)
plot(x,y)
abline(fit,col="red")
}
attatch(Carseats)
regplot(Price,Sales)
plot(Price,Sales)
attach(Carseats)
regplot(Price,Sales)
regplot=function(x,y,...){
fit=lm(y~x)
plot(x,y,...)
abline(fit,col="red")
}
regplot(Price,Sales,xlab="Price", ylab="Sales",col="blue", pch=20)
source('~/.active-rstudio-document')
?MASS
??MASS
getwd()
setwd("/Users/saulgarcia/Desktop/DATA/01Salaries/output")
salaries<-read.csv("Salaries.csv")
rm(list=ls())
salaries<-read.csv("Salaries.csv")
plot(salaries)
str(salaries)
head(salaries$EmployeeName,n=15)
plot(salaries$TotalPayBenefits)
plot(salaries$Total)
plot(salaries$TotalPay)
head(salaries,n=6)
distinct(salaries$Status)
head(salaries[salaries$Status="FT",],n=6)
head(salaries[salaries$Status=="FT",],6)
head(salaries[salaries$Status=="PT",],6)
head(salaries[salaries$Status=="",],6)
head(salaries[salaries$TotalPay<0,],6)
head(salaries[salaries$TotalPay<0,],8)
head(salaries$Notes,8)
summary(salaries)
head(salaries[salaries$BasePay=="",],15)
head(salaries[salaries$JobTitle=="Nurse",],15)
head(salaries[salaries$JobTitle=="nurse",],15)
library(dplyr)
salaries %>% distinct(JobTitle)
?dplyr
salaries %>% distinct(JobTitle) %>% summarise()
salaries %>% distinct(JobTitle) %>% summarise(TotalPay)
names(salaries)
salaries %>% select(JobTitle,TotalPay,Year) %>% distinct(JobTitle)
salaries %>% select(JobTitle,TotalPay,Year) #%>% distinct(JobTitle)
salaries %>% select(JobTitle) %>% distinct(JobTitle)
salaries %>% select(TotalPay,Year) %>% distinct(JobTitle)
salaries %>% select("JobTitle",TotalPay,Year) %>% distinct(JobTitle)
?select
salaries %>% select(salaries,JobTitle,TotalPay,Year) %>% distinct(JobTitle)
select(salaries,JobTitle,TotalPay,Year)
select(salaries,JobTitle,TotalPay,Year)
select(salaries,1)
salaries %>% select() %>% distinct(JobTitle)
salaries %>% select() %>% distinct(JobTitle)
salaries %>% %>% distinct(JobTitle)
salaries  %>% distinct(JobTitle)
salaries  %>% select(JobTitle)   #distinct(JobTitle)
